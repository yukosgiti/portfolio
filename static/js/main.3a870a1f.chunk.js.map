{"version":3,"sources":["components/cv.tsx","resources/images/pp.jpg","resources/images/pasha.png","resources/index.ts","atoms/cv-contact-link.tsx","atoms/cv-button.tsx","components/about-me.tsx","ColorModeSwitcher.tsx","components/header.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["Cv","isDarkMode","useColorMode","colorMode","Fragment","textAlign","fontSize","minH","direction","w","backgroundColor","theme","colors","white","images","ppPath","pashaPath","locale","localeJson","data","dataJson","CvContactLink","icon","src","copy","useClipboard","onCopy","value","toast","hasCopied","useToast","href","undefined","target","referrerPolicy","createElement","variant","colorScheme","onClick","e","title","description","status","CvButton","text","borderRadius","_hover","borderBottomWidth","sizes","borderColor","red","borderBottomStyle","AboutMe","birthDate","dateOfBirth","Date","user","birthday","alignItems","justifyContent","py","space","h","backgroundPosition","backgroundSize","mr","radii","full","backgroundImage","aboutMe","hello","opacity","Math","floor","getTime","FiLinkedin","links","linkedin","FiGithub","github","FiMail","email","ColorModeSwitcher","props","toggleColorMode","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","color","marginLeft","aria-label","Header","px","blackAlpha","fontWeight","fontWeights","semibold","fontSizes","header","siteName","about","projects","justifySelf","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3a870a1f.chunk.js","sourcesContent":["import { useColorMode, Flex, theme } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { Header, AboutMe } from \".\";\r\n\r\ninterface Props {}\r\n\r\nexport const Cv = ({}: Props) => {\r\n  const { colorMode } = useColorMode();\r\n  const isDarkMode = colorMode === \"dark\";\r\n  return (\r\n    <React.Fragment>\r\n      <Flex\r\n        textAlign=\"center\"\r\n        fontSize=\"xl\"\r\n        minH=\"100vh\"\r\n        direction=\"column\"\r\n        w={\"100%\"}\r\n        backgroundColor={isDarkMode ? \"#151619\" : theme.colors.white}\r\n      >\r\n        <AboutMe />\r\n        <Header />\r\n      </Flex>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/pp.ad8a6c6b.jpg\";","export default __webpack_public_path__ + \"static/media/pasha.28981bd5.png\";","import ppPath from \"./images/pp.jpg\";\r\nimport pashaPath from \"./images/pasha.png\";\r\nimport localeJson from \"./locale.json\";\r\nimport dataJson from \"./data.json\";\r\nexport const images = {\r\n  ppPath,\r\n  pashaPath,\r\n};\r\n\r\nexport const locale = localeJson;\r\nexport const data = dataJson;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useClipboard } from \"@chakra-ui/hooks\";\r\nimport { HStack, LinkBox, LinkOverlay, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport React, { createElement } from \"react\";\r\nimport { IconType } from \"react-icons\";\r\n\r\ninterface Props {\r\n  icon: IconType;\r\n  src: string;\r\n  copy?: boolean;\r\n}\r\n\r\nexport const CvContactLink = ({ icon, src, copy }: Props) => {\r\n  const { value, onCopy, hasCopied } = useClipboard(src);\r\n  const toast = useToast();\r\n  const handleCopyLinkToClipboard = (e: React.MouseEvent<any>) => {\r\n    onCopy();\r\n    toast({\r\n      title: src,\r\n      description: \"Bağlantı kopyalandı.\",\r\n      status: \"info\",\r\n    });\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <LinkBox>\r\n        <LinkOverlay\r\n          href={copy ? undefined : src}\r\n          target={copy ? undefined : \"__blank\"}\r\n          referrerPolicy=\"no-referrer-when-downgrade\"\r\n        >\r\n          <HStack>\r\n            {createElement(icon)}\r\n            <Button\r\n              variant=\"link\"\r\n              colorScheme=\"blue\"\r\n              onClick={handleCopyLinkToClipboard}\r\n            >\r\n              {src}\r\n            </Button>\r\n          </HStack>\r\n        </LinkOverlay>\r\n      </LinkBox>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport theme from \"@chakra-ui/theme\";\r\nimport React from \"react\";\r\n\r\ninterface Props {\r\n  text: string;\r\n}\r\n\r\nexport const CvButton = ({ text }: Props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Button\r\n        variant=\"ghost\"\r\n        borderRadius=\"none\"\r\n        _hover={{\r\n          // border: \"1px solid red\",\r\n          borderBottomWidth: theme.sizes[1],\r\n          borderColor: theme.colors.red[700],\r\n          borderBottomStyle: \"solid\",\r\n        }}\r\n      >\r\n        {text}\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { Box, Flex, Heading, Text, VStack } from \"@chakra-ui/layout\";\r\nimport theme from \"@chakra-ui/theme\";\r\nimport React from \"react\";\r\nimport { data, images, locale } from \"../resources\";\r\nimport { FiGithub, FiLinkedin, FiMail } from \"react-icons/fi\";\r\nimport { CvContactLink } from \"../atoms\";\r\n\r\ninterface Props {}\r\n\r\nexport const AboutMe = ({}: Props) => {\r\n  const dateOfBirth = new Date(data.user.birthday);\r\n\r\n  const getAge = (birthDate: Date) =>\r\n    Math.floor(\r\n      (new Date().getTime() - new Date(birthDate).getTime()) / 3.15576e10\r\n    );\r\n\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"center\" py={theme.space[36]}>\r\n      <Box\r\n        w={\"25vmin\"}\r\n        h={\"25vmin\"}\r\n        backgroundPosition=\"center\"\r\n        backgroundSize=\"contain\"\r\n        mr={theme.space[10]}\r\n        borderRadius={theme.radii.full}\r\n        backgroundImage={`url(${images.ppPath})`}\r\n      ></Box>\r\n      <VStack alignItems={\"flex-start\"}>\r\n        <Heading>{locale.aboutMe.hello}</Heading>\r\n        <Text opacity={0.9}>\r\n          {getAge(dateOfBirth) + \" yaşında meraklı bir yazılımcıyım. \"}\r\n        </Text>\r\n        <CvContactLink icon={FiLinkedin} src={data.user.links.linkedin} />\r\n        <CvContactLink icon={FiGithub} src={data.user.links.github} />\r\n        <CvContactLink icon={FiMail} src={data.user.links.email} copy />\r\n      </VStack>\r\n    </Flex>\r\n  );\r\n};\r\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { Flex, HStack, Text, theme, useColorMode } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { CvButton } from \"../atoms\";\r\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\r\nimport { locale } from \"../resources\";\r\n\r\ninterface HeaderProps {}\r\n\r\nexport const Header = ({}: HeaderProps) => {\r\n  const { colorMode } = useColorMode();\r\n  const isDarkMode = colorMode === \"dark\";\r\n  return (\r\n    <Flex\r\n      py={theme.space[5]}\r\n      px={[\"10%\", \"25%\"]}\r\n      alignItems={\"center\"}\r\n      justifyContent={\"space-between\"}\r\n      backgroundColor={\r\n        isDarkMode ? theme.colors.blackAlpha[500] : theme.colors.blackAlpha[300]\r\n      }\r\n    >\r\n      <Text\r\n        fontWeight={theme.fontWeights.semibold}\r\n        fontSize={theme.fontSizes[\"2xl\"]}\r\n      >\r\n        {locale.header.siteName}\r\n      </Text>\r\n      <HStack>\r\n        <CvButton text={locale.header.about} />\r\n        <CvButton text={locale.header.projects} />\r\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n      </HStack>\r\n    </Flex>\r\n  );\r\n};\r\n","import { ChakraProvider, theme } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { Cv } from \"./components\";\n\nexport const App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Cv />\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}