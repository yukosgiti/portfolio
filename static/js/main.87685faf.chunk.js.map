{"version":3,"sources":["types.ts","atoms/cv-contact-link.tsx","atoms/cv-project-card.tsx","resources/images/8read-content.jpg","resources/images/chess-home.jpg","resources/images/pasha.png","resources/images/plate-recognition.jpg","resources/images/pp.jpg","resources/images/sakar-asistan.jpg","resources/images/tf-idf.jpg","resources/images/wifm-home.jpg","resources/index.ts","components/projects.tsx","components/cv.tsx","components/about-me.tsx","ColorModeSwitcher.tsx","components/header.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["Tag","ProjectPlace","ProjectType","CvContactLink","icon","src","copy","useClipboard","onCopy","value","toast","hasCopied","useToast","Fragment","aria-label","href","undefined","target","referrerPolicy","createElement","fontSize","theme","fontSizes","sm","md","variant","colorScheme","tabIndex","onClick","e","title","description","status","CvProjectCard","date","images","tags","place","type","useState","hasBeenVisible","setHasBeenVisible","ref","useInViewEffect","observer","entry","isIntersecting","unobserve","threshold","timeAgo","Intl","RelativeTimeFormat","style","format","getFullYear","Date","initialScale","in","w","sizes","full","justifyContent","alignItems","opacity","map","tag","index","textAlign","ppPath","pashaPath","plateRecognitionPath","wifmHomePath","eightReadContentPath","chessHomePath","sakarAsistanPath","tfIdfPath","locale","localeJson","data","dataJson","projects","School","Bogaizici","HTML","CSS","JavaScript","DotNet","MSSQL","DotNetCore","Python","Unity3D","ITU","PyTorch","NumPy","Projects","my","space","header","spacing","sort","a","b","getTime","project","Cv","isDarkMode","useColorMode","colorMode","minH","direction","minW","backgroundColor","colors","white","AboutMe","birthDate","dateOfBirth","user","birthday","flexDir","py","gray","h","borderRadius","radii","mx","aboutMe","hello","lg","Math","floor","FiLinkedin","links","linkedin","FiGithub","github","FiMail","email","ColorModeSwitcher","props","toggleColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","color","marginLeft","Header","px","black","zIndex","pos","top","fontWeight","fontWeights","semibold","siteName","justifySelf","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.87685faf.chunk.js","sourcesContent":["export enum Tag {\r\n  HTML = \"HTML\",\r\n  Python = \"Pyhton 3\",\r\n  PyTorch = \"PyTorch\",\r\n  NumPy = \"NumPy\",\r\n  CSS = \"CSS\",\r\n  JavaScript = \"JavaScript\",\r\n  TypeScript = \"TypeScript\",\r\n  MSSQL = \"MSSQL\",\r\n  DotNetCore = \".NetCore\",\r\n  DotNet = \".Net\",\r\n  Unity3D = \"Unity3D\",\r\n}\r\n\r\nexport enum ProjectPlace {\r\n  Bogaizici = \"Boğaziçi University\",\r\n  ITU = \"Istanbul Technical University\",\r\n  TetraHGS = \"TetraHGS\",\r\n}\r\n\r\nexport enum ProjectType {\r\n  School = \"school\",\r\n  Work = \"work\",\r\n  Personal = \"personal\",\r\n}\r\nexport interface Project {\r\n  type: ProjectType;\r\n  date: Date;\r\n  place?: ProjectPlace;\r\n  title: string;\r\n  description: string;\r\n  images?: string[];\r\n  tags?: Tag[];\r\n}\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useClipboard } from \"@chakra-ui/hooks\";\r\nimport { HStack, LinkBox, LinkOverlay } from \"@chakra-ui/layout\";\r\nimport theme from \"@chakra-ui/theme\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport React, { createElement } from \"react\";\r\nimport { IconType } from \"react-icons\";\r\n\r\ninterface Props {\r\n  icon: IconType;\r\n  src: string;\r\n  copy?: boolean;\r\n}\r\n\r\nexport const CvContactLink = ({ icon, src, copy }: Props) => {\r\n  const { value, onCopy, hasCopied } = useClipboard(src);\r\n  const toast = useToast();\r\n  const handleCopyLinkToClipboard = (e: React.MouseEvent<any>) => {\r\n    if (!copy) return;\r\n    onCopy();\r\n    toast({\r\n      title: src,\r\n      description: \"Bağlantı kopyalandı.\",\r\n      status: \"info\",\r\n    });\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <LinkBox>\r\n        <LinkOverlay\r\n          aria-label={`Go to ${src}`}\r\n          href={copy ? undefined : src}\r\n          target={copy ? undefined : \"__blank\"}\r\n          referrerPolicy=\"no-referrer-when-downgrade\"\r\n        >\r\n          <HStack>\r\n            {createElement(icon)}\r\n            <Button\r\n              fontSize={[theme.fontSizes.sm, theme.fontSizes.md]}\r\n              variant=\"link\"\r\n              colorScheme=\"blue\"\r\n              tabIndex={copy ? undefined : -1}\r\n              onClick={handleCopyLinkToClipboard}\r\n            >\r\n              {src}\r\n            </Button>\r\n          </HStack>\r\n        </LinkOverlay>\r\n      </LinkBox>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import {\r\n  Heading,\r\n  HStack,\r\n  Image,\r\n  ScaleFade,\r\n  Tag,\r\n  Text,\r\n  theme,\r\n  VStack,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useState } from \"react\";\r\nimport { useInViewEffect } from \"react-hook-inview\";\r\nimport { Project } from \"../types\";\r\n\r\nexport const CvProjectCard = ({\r\n  title,\r\n  date,\r\n  description,\r\n  images,\r\n  tags,\r\n  place,\r\n  type,\r\n}: Project) => {\r\n  const [hasBeenVisible, setHasBeenVisible] = useState(false);\r\n\r\n  const ref = useInViewEffect(\r\n    ([entry], observer) => {\r\n      if (entry.isIntersecting) {\r\n        observer.unobserve(entry.target);\r\n      }\r\n      if (entry.isIntersecting) {\r\n        setHasBeenVisible(true);\r\n      }\r\n    },\r\n    { threshold: 0.5 }\r\n  );\r\n  const dateFormatter = new Intl.RelativeTimeFormat(\"en-US\", {\r\n    style: \"long\",\r\n  });\r\n  const timeAgo = dateFormatter.format(\r\n    date.getFullYear() - new Date().getFullYear(),\r\n    \"years\"\r\n  );\r\n  return (\r\n    <React.Fragment>\r\n      <ScaleFade ref={ref} initialScale={0.9} in={hasBeenVisible}>\r\n        <VStack w={theme.sizes.full} justifyContent=\"start\" alignItems=\"start\">\r\n          <Heading>{title}</Heading>\r\n          <Text opacity={0.8} fontSize={theme.fontSizes.sm}>\r\n            {place} - {timeAgo}\r\n          </Text>\r\n          <HStack>\r\n            {tags?.map((tag, index) => {\r\n              return (\r\n                <React.Fragment key={index}>\r\n                  <Tag>{tag}</Tag>\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </HStack>\r\n          <Text textAlign=\"start\">{description}</Text>\r\n          <HStack>\r\n            {images?.map((src, index) => {\r\n              return (\r\n                <React.Fragment key={index}>\r\n                  <Image src={src} />\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n          </HStack>\r\n        </VStack>\r\n      </ScaleFade>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/8read-content.caa048e3.jpg\";","export default __webpack_public_path__ + \"static/media/chess-home.ea721fb0.jpg\";","export default __webpack_public_path__ + \"static/media/pasha.28981bd5.png\";","export default __webpack_public_path__ + \"static/media/plate-recognition.9ac28ac2.jpg\";","export default __webpack_public_path__ + \"static/media/pp.ad8a6c6b.jpg\";","export default __webpack_public_path__ + \"static/media/sakar-asistan.bbbe115c.jpg\";","export default __webpack_public_path__ + \"static/media/tf-idf.0895b12e.jpg\";","export default __webpack_public_path__ + \"static/media/wifm-home.c474f0dd.jpg\";","import dataJson from \"./data.json\";\r\nimport eightReadContentPath from \"./images/8read-content.jpg\";\r\nimport chessHomePath from \"./images/chess-home.jpg\";\r\nimport pashaPath from \"./images/pasha.png\";\r\nimport plateRecognitionPath from \"./images/plate-recognition.jpg\";\r\nimport ppPath from \"./images/pp.jpg\";\r\nimport sakarAsistanPath from \"./images/sakar-asistan.jpg\";\r\nimport tfIdfPath from \"./images/tf-idf.jpg\";\r\nimport wifmHomePath from \"./images/wifm-home.jpg\";\r\nimport localeJson from \"./locale.json\";\r\nexport const images = {\r\n  ppPath,\r\n  pashaPath,\r\n  plateRecognitionPath,\r\n  wifmHomePath,\r\n  eightReadContentPath,\r\n  chessHomePath,\r\n  sakarAsistanPath,\r\n  tfIdfPath,\r\n};\r\n\r\nexport const locale = localeJson;\r\nexport const data = dataJson;\r\n","import { Container, Heading, theme, VStack } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { CvProjectCard } from \"../atoms\";\r\nimport { images, locale } from \"../resources\";\r\nimport { Project, ProjectPlace, ProjectType, Tag } from \"../types\";\r\n\r\ninterface Props {}\r\n\r\nconst projects: Project[] = [\r\n  {\r\n    type: ProjectType.School,\r\n    place: ProjectPlace.Bogaizici,\r\n    date: new Date(2015, 9, 1),\r\n    title: \"WIFM - Will It Fit Me?\",\r\n    description:\r\n      \"WIFM is my final project for my CET102 course. It's a concept website that allows one to set their body proportions to try out clothing online.\",\r\n    tags: [Tag.HTML, Tag.CSS, Tag.JavaScript],\r\n    images: [images.wifmHomePath],\r\n  },\r\n  {\r\n    type: ProjectType.School,\r\n    place: ProjectPlace.Bogaizici,\r\n    date: new Date(2017, 12, 15),\r\n    title: \"Chess Application\",\r\n    description:\r\n      \"This is my final project for the CET301 course. It's an online Chess client and server implementation that utilizes sockets.\",\r\n    tags: [Tag.DotNet, Tag.MSSQL],\r\n    images: [images.chessHomePath],\r\n  },\r\n  {\r\n    type: ProjectType.School,\r\n    place: ProjectPlace.Bogaizici,\r\n    date: new Date(2018, 5, 11),\r\n    title: \"8Read\",\r\n    description:\r\n      \"8Read is my final project for my CET322 course. It's a fullstack clone of reddit.com\",\r\n    tags: [Tag.DotNetCore, Tag.MSSQL, Tag.HTML, Tag.CSS, Tag.JavaScript],\r\n    images: [images.eightReadContentPath],\r\n  },\r\n  {\r\n    type: ProjectType.School,\r\n    place: ProjectPlace.Bogaizici,\r\n    date: new Date(2019, 5, 11),\r\n    title: \"Movie Suggestion\",\r\n    description:\r\n      \"This project was for my CMPE493 course. It creates movie suggestions given a set of liked movies. It calculates and compares the cosine similarity of liked movies and the imdb movies dataset based on their tf-idf scores. It isn't very pretty but it works :)\",\r\n    tags: [Tag.Python],\r\n    images: [images.tfIdfPath],\r\n  },\r\n  {\r\n    type: ProjectType.School,\r\n    place: ProjectPlace.Bogaizici,\r\n    date: new Date(2019, 5, 11),\r\n    title: \"Sakar Asistan\",\r\n    description:\r\n      \"Sakar Asistan is my final project for my CET472 course. It's an educational game that teaches properties of matter.\",\r\n    tags: [Tag.Unity3D],\r\n    images: [images.sakarAsistanPath],\r\n  },\r\n  {\r\n    type: ProjectType.School,\r\n    place: ProjectPlace.ITU,\r\n    date: new Date(2020, 5, 11),\r\n    title: \"ANPR System\",\r\n    description:\r\n      \"Automatic Number Plate Recognition (ANPR) system made with YoloV5 architecture.\",\r\n\r\n    tags: [Tag.Python, Tag.PyTorch, Tag.NumPy],\r\n    images: [images.plateRecognitionPath],\r\n  },\r\n];\r\nexport const Projects = ({}: Props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <VStack>\r\n        <Heading my={theme.space[12]}>{locale.header.projects}</Heading>\r\n        <VStack spacing={theme.space[12]}>\r\n          {projects\r\n            .sort((a, b) => -a.date.getTime() + b.date.getTime())\r\n            .map((project, index) => {\r\n              return (\r\n                <React.Fragment key={index}>\r\n                  <Container>\r\n                    <CvProjectCard {...project} />\r\n                  </Container>\r\n                </React.Fragment>\r\n              );\r\n            })}\r\n        </VStack>\r\n      </VStack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { Flex, theme, useColorMode } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { AboutMe, Header, Projects } from \".\";\r\n\r\ninterface Props {}\r\n\r\nexport const Cv = ({}: Props) => {\r\n  const { colorMode } = useColorMode();\r\n  const isDarkMode = colorMode === \"dark\";\r\n  return (\r\n    <React.Fragment>\r\n      <Flex\r\n        textAlign=\"center\"\r\n        fontSize=\"xl\"\r\n        minH=\"100vh\"\r\n        direction=\"column\"\r\n        minW={\"100%\"}\r\n        backgroundColor={isDarkMode ? \"#151619\" : theme.colors.white}\r\n      >\r\n        <Header />\r\n        <AboutMe />\r\n        <Projects />\r\n      </Flex>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import { useColorMode } from \"@chakra-ui/color-mode\";\r\nimport { Image } from \"@chakra-ui/image\";\r\nimport { Flex, Heading, Text, VStack } from \"@chakra-ui/layout\";\r\nimport theme from \"@chakra-ui/theme\";\r\nimport React from \"react\";\r\nimport { FiGithub, FiLinkedin, FiMail } from \"react-icons/fi\";\r\nimport { CvContactLink } from \"../atoms\";\r\nimport { data, images, locale } from \"../resources\";\r\n\r\ninterface Props {}\r\n\r\nexport const AboutMe = ({}: Props) => {\r\n  const { colorMode } = useColorMode();\r\n  const isDarkMode = colorMode === \"dark\";\r\n  const dateOfBirth = new Date(data.user.birthday);\r\n\r\n  const getAge = (birthDate: Date) =>\r\n    Math.floor(\r\n      (new Date().getTime() - new Date(birthDate).getTime()) / 3.15576e10\r\n    );\r\n\r\n  return (\r\n    <Flex\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      flexDir={[\"column\", \"row\"]}\r\n      py={[theme.space[16], theme.space[36]]}\r\n      backgroundColor={isDarkMode ? \"#222224\" : theme.colors.gray[200]}\r\n    >\r\n      <Image\r\n        w={[\"50vmin\", \"30vmin\"]}\r\n        h={[\"50vmin\", \"30vmin\"]}\r\n        aria-label=\"Photo of me.\"\r\n        src={images.ppPath}\r\n        borderRadius={theme.radii.full}\r\n        mx={[0, theme.space[10]]}\r\n      />\r\n      <VStack alignItems={\"flex-start\"}>\r\n        <Heading\r\n          fontSize={[\r\n            theme.fontSizes[\"2xl\"],\r\n            theme.fontSizes[\"3xl\"],\r\n            theme.fontSizes[\"4xl\"],\r\n          ]}\r\n        >\r\n          {locale.aboutMe.hello}\r\n        </Heading>\r\n        <Text opacity={0.9} fontSize={[theme.fontSizes.md, theme.fontSizes.lg]}>\r\n          {`I'm a curious ${getAge(dateOfBirth)} year old developer.`}\r\n        </Text>\r\n        <CvContactLink icon={FiLinkedin} src={data.user.links.linkedin} />\r\n        <CvContactLink icon={FiGithub} src={data.user.links.github} />\r\n        <CvContactLink icon={FiMail} src={data.user.links.email} copy />\r\n      </VStack>\r\n    </Flex>\r\n  );\r\n};\r\n","import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { Flex, HStack, Text, theme, useColorMode } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { ColorModeSwitcher } from \"../ColorModeSwitcher\";\r\nimport { locale } from \"../resources\";\r\n\r\ninterface HeaderProps {}\r\n\r\nexport const Header = ({}: HeaderProps) => {\r\n  const { colorMode } = useColorMode();\r\n  const isDarkMode = colorMode === \"dark\";\r\n  return (\r\n    <Flex\r\n      py={theme.space[5]}\r\n      px={[\"10%\", \"25%\"]}\r\n      alignItems={\"center\"}\r\n      justifyContent={\"space-between\"}\r\n      backgroundColor={isDarkMode ? theme.colors.black : theme.colors.white}\r\n      zIndex={99}\r\n      pos=\"sticky\"\r\n      top={0}\r\n    >\r\n      <Text\r\n        fontWeight={theme.fontWeights.semibold}\r\n        fontSize={theme.fontSizes[\"2xl\"]}\r\n      >\r\n        {locale.header.siteName}\r\n      </Text>\r\n      <HStack>\r\n        {/* <CvButton text={locale.header.about} /> */}\r\n        {/* <CvButton text={locale.header.projects} /> */}\r\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n      </HStack>\r\n    </Flex>\r\n  );\r\n};\r\n","import { ChakraProvider, theme } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport { Cv } from \"./components\";\n\nexport const App = () => {\n  return (\n    <ChakraProvider theme={theme}>\n      <Cv />\n    </ChakraProvider>\n  );\n};\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}